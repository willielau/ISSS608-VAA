---
title: "Hands-on Exercise 1"
date: last-modified
---

# **Getting Started**

## Install & Launching R Packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages have been installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing Data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# **Exploring ggplot2**

## Bar Chart

```{r}
ggplot(data = exam_data,
       aes(x = RACE)) +
  geom_bar()
```

## Dotplot

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 2.5,
               dotsize = 0.5) +
  scale_y_continuous(NULL, 
                     breaks = NULL)
```

## Histogram

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "pink")
```

```{r}
ggplot(data = exam_data,
       aes(x = MATHS,
           fill = GENDER)) +
  geom_histogram(bins = 20,
                 color = "black")
```

## Kernel Density Estimate

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_density()
```

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

## Boxplot

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot()
```

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot(notch = TRUE)
```

## Boxplot + Point

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  geom_point(position = "jitter",
             size = 0.5)
```

## Violin

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin()
```

## Violin + Boxplot

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin(fill = "light yellow") +
  geom_boxplot(alpha = 0.5)
```

## Scatter Plot (Point)

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = ENGLISH)) +
  geom_point()
```

## Best Fit Curve

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = ENGLISH)) +
  geom_point() +
  geom_smooth(size = 0.5)
```

## Best Fit Line

```{r}
ggplot(data = exam_data,
       aes(y = MATHS, 
           x = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, size = 0.5)
```

## Trellis Plot (Facet)

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_wrap(~ CLASS)
```

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_grid(~ CLASS)
```

```{r}
ggplot(data = exam_data,
       aes(y = MATHS,
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(~ GENDER)
```

```{r}
ggplot(data = exam_data,
       aes(y = MATHS,
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(GENDER ~.)
```

```{r}
ggplot(data = exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS)
```

## Working with Coordinates

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip()
```

Aligning x-axis and y-axis ranges:

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
```

## Working with Themes

A list of themes can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html)

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray() +
  theme(panel.background = element_rect(
    fill = "light blue",
    colour = "light blue",
    linewidth = 0.5,
    linetype = "solid"),
    panel.grid.major = element_line(
      linewidth = 0.5,
      linetype = "solid",
      colour = "white"),
    panel.grid.minor = element_line(
      linewidth = 0.25,
      linetype = "solid",
      colour = "white"))
```

# **Design Makeover**

## Makeover 1

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = RACE)) +
  geom_bar()
```

Issues with the bar chart:

-   y-axis (count) is not clear

-   the bars should be sorted by frequency

-   frequency values should be indicated for clarity

```{r}
ggplot(data=exam_data,
       aes(x=reorder(RACE,RACE,
                function(x)-length(x))))+
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(after_stat(count), ", ", 
      round(after_stat(count)/sum(after_stat(count))*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

```{r}
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(after_stat(count), ", ", 
      round(after_stat(count)/sum(after_stat(count))*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

## Makeover 2

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20)
```

Issues with the histogram:

-   bins are not clear

-   add mean and median lines

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 colour = "black",
                 fill = "light yellow") +
  geom_vline(aes(xintercept = mean(MATHS, na.rm = T)),
             colour = "red",
             linetype = "dashed",
             size = 1) +
  geom_vline(aes(xintercept = median(MATHS, na.rm = T)),
             colour = "purple",
             linetype = "dashed",
             size = 1)
```

## Makeover 3

Creating a background histogram for total distribution within a facet wrap for two categories

```{r}
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, bins = 20, fill = "grey", alpha = .5) +
  geom_histogram(bins =20, colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = "none") +  
  theme_bw()
```

## Makeover 4

Create intercept grids and aligning x-axis and y-axis for a scatterplot

```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```

# **Tips & Tricks**

To only show code chunk without the corresponding plots, use #\| eval: false

![](images/Code%20chunk%20only.jpg)

To only show plot without the corresponding code chunk, use #\| echo: false

![](images/Plot%20only.jpg)
